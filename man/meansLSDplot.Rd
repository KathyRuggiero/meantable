% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/meansLSDplot.R
\name{meansLSDplot}
\alias{meansLSDplot}
\title{Generate means plot with Least Significant Difference (LSD) bar(S)}
\usage{
meansLSDplot(lsdList, y, x, facets, yLabel, xLabel, shape, colour,
  pointSize = 2.5, lineType, lineWidth = 0.9, axisLabelSize = 14,
  tickMarkLabelSize = 12, xTickLabelAngle = 0, xStripTextSize = 12,
  yStripTextSize = 12, legendKeyWidth = 1)
}
\arguments{
\item{lsdList}{a list of objects (dataframes and vectors) of the form generated by the
\link{makeLSDlist}. The first object must be a predicted means dataframe, with a column for each
factor specified in the \code{modelterm} argument in the \link[predictmeans]{predictmeans}
function and a one row for each combination of the factor levels.}

\item{y}{column name (a character string) containing predicted means in \code{lsdList[[1]]},
i.e. the first object (a dataframe) in \code{lsdList}.}

\item{x}{column name (a character string) of variable (factor) in \code{lsdList[[1]]} to be
plotted on the x-axis.}

\item{facets}{character vector of factor names whose levels define a matrix of row and/or column
panels in the plot. This vector must be of length 2. Thus, if only one facet factor is needed,
fill the vector with the character string \code{"."} (see Examples below). The order of the
factor names, one of which may be the character string \code{"."}, determine whether the levels
are displayed in rows or columns, with first element (factor name) corresponding to row panels
and the second to column panels.}

\item{yLabel}{y-axis label (character string)}

\item{xLabel}{x-axis label (character string)}

\item{shape}{factor name (character string); if supplied, assigns pre-defined shapes to the
plotting characters for each of the factor's levels.}

\item{colour}{factor name (character string); if supplied, assigns pre-defined colour to the
plotting characters for each of the factor's levels.}

\item{pointSize}{numeric value for size of plotting characters}

\item{lineType}{factor name (character string); if supplied, assigns pre-defined line type to the
for each of the factor's levels.}

\item{lineWidth}{numeric value for width of line used for LSD bars and for any line geometries}

\item{axisLabelSize}{axis label text size in pts}

\item{tickMarkLabelSize}{tick label text size in pts}

\item{xTickLabelAngle}{angle (0, 45 or 90; default 0) of x-axis tick labels}

\item{xStripTextSize}{x strip text size in pts}

\item{yStripTextSize}{y strip text size in pts}

\item{legendKeyWidth}{width of legend key in cms}
}
\description{
A ggplot2 wrapper function which generates a plot of predicted means with LSD bar(s). It allows
a matrix of panels defined by row and column facetting variables. This function requires as its
first argument a list of the form generated by the \link{makeLSDlist} function.
}
\examples{
#' # fruitfly data: factorial with added control
data(fruitfly)
# -- set up factors
newfruitfly <- transform(fruitfly, Type = factor(Type, levels=c(9,0,1),
                                   labels=c("Control", "Newly pregnant", "Virgin")))
newfruitfly$Partners <- factor(newfruitfly$Partners)
newfruitfly$Control <- factor(ifelse(newfruitfly$Type=="Control", "Yes", "No"))
# -- fit model
fruitfly.lm <- lm(Longevity ~ Control/(Partners*Type), data=newfruitfly)
# -- perform post-hoc tests
fruitfly.pm <- predictmeans(fruitfly.lm, modelterm = "Control:Partners:Type",
                            pairwise = TRUE, plot = FALSE)
# -- get table of predicted means
fruitfly.m2df <- means2df(fruitfly.pm)
# -- create post-hoc tests summary table
fruitfly.tab <- makeSummaryTable(fruitfly.pm)
# -- replace single comparison name with individual columns
ffCompNames.df <- comparisonNames2df(fruitfly.tab$Comparison, split.at=":",
                                     varNames = c("Control", "Partners", "Type"))
newfruitfly.tab <- data.frame(ffCompNames.df, fruitfly.tab[,-1])
newfruitfly.list <- makeLSDlist(fruitfly.m2df, y="Mean", x="Type", eqLevelFactors = "Partners",
            LSD=8.29, edgeWidth = 0.05)

# -- generate means and LSDs plot
meansLSDplot(lsdList =newfruitfly.list, x = "Type", y = "Mean")

# -- specify x- and y-axis labels
meansLSDplot(lsdList =newfruitfly.list, x = "Type", y = "Mean",
             xLabel = "Type of partner", yLabel = "Predicted mean")

# -- colour points by Partners
meansLSDplot(lsdList =newfruitfly.list, x = "Type", y = "Mean",
             xLabel = "Type of partner", yLabel = "Predicted mean",
             colour = "Partners")

# -- shape points by Partners
meansLSDplot(lsdList =newfruitfly.list, x = "Type", y = "Mean",
             xLabel = "Type of partner", yLabel = "Predicted mean",
             shape = "Partners")

# -- colour and shape points by Partners
meansLSDplot(lsdList =newfruitfly.list, x = "Type", y = "Mean",
             xLabel = "Type of partner", yLabel = "Predicted mean",
             colour = "Partners", shape = "Partners")

# -- define shapes of points and line types by Partners
meansLSDplot(lsdList =newfruitfly.list, x = "Type", y = "Mean",
             xLabel = "Type of partner", yLabel = "Predicted mean",
             shape = "Partners", lineType = "Partners")

# bugs data: weighted least squares analysis of baseline concentration in rat lymph
data(bugs)

# -- log-transform response
bugs$logBaseline <- log(bugs$Baseline + 1)

# -- get weights
var.mat <- with(bugs, tapply(logBaseline, list(State, Bacteria), var))
var.df <- melt(var.mat)
names(var.df) <- c("State", "Bacteria", "Var")
newbugs <- merge(bugs, var.df)
newbugs$Weight <- 1/newbugs$Var

# -- weighted least squares two-way ANOVA
baselineBugs.lm <- lm(logBaseline ~ State*Bacteria, data = newbugs, weights = Weight)
anova(baselineBugs.lm)

# -- get predicted means and post-hoc test summary tables
baselineBugs.pm <- predictmeans(baselineBugs.lm, modelterm = "State:Bacteria",
                                pairwise=TRUE, plot = FALSE)
bugs.m2df <- means2df(baselineBugs.pm)
baselineBugs.tab <- makeSummaryTable(baselineBugs.pm)
compNames.df <- comparisonNames2df(baselineBugs.tab$Comparison, split.at = ":",
                                   varNames = c("State", "Bacteria") )
newbaseBugs.tab <- data.frame(compNames.df, baselineBugs.tab[,-1])
keeprows <- whichComparison(compNames.df, contrFactor="State")
newbaseBugs.tab2 <- newbaseBugs.tab[keeprows,]

# -- compute min, max and average LSD by Bacterial strain
newbaseBugs.lsd <- getLSDsummary(data = newbaseBugs.tab2, lsdVar = "LSD", by = "Bacteria1")

# -- create list needed to plot means and LSDs
newbaseBugs.list <- makeLSDlist(meansData = bugs.m2df, y = "Mean", x = "State",
                                LSD = newbaseBugs.lsd, eqLevelFactors = "Bacteria",
                                lsdVar = "LSD_avg", edgeWidth = 0.1)
# plot means with LSD bars, facetting by Bacteria
meansLSDplot(lsdList = newbaseBugs.list, x = "State", y = "Mean", facets = c("Bacteria","."),
             xLabel = "Disease state", yLabel = "Predicted mean")

# change font size and orientation of x-axis tick labels
meansLSDplot(lsdList = newbaseBugs.list, x = "State", y = "Mean", facets = c("Bacteria","."),
             xLabel = "Disease state", yLabel = "Predicted mean", tickMarkLabelSize = 11,
             xTickLabelAngle = 90)

# bugs data: mixed model analysis of bacterial concentration across time (ignoring baseline)
data(bugs)

# -- log-transform response
bugs$logCells <- log(bugs$Cells + 1)

# convert Rat and Time to factors
bugs <- toFactor(bugs, variables = c("Rat", "Time"))

# fit mixed model
bugs.lme <- lme(logCells ~ Bacteria*State*Time, random = ~1|Rat, data = bugs)
anova(bugs.lme)

# -- get predicted means and post-hoc test summary tables
bugs.pm <- predictmeans(bugs.lme, modelterm = "Bacteria:State:Time",
                        pairwise=TRUE, plot = FALSE)
bugs.m2df <- means2df(bugs.pm)
bugs.tab <- makeSummaryTable(bugs.pm)
compNames.df <- comparisonNames2df(bugs.tab$Comparison, split.at = ":",
                                   varNames = c("Bacteria", "State", "Time") )
newBugs.tab <- data.frame(compNames.df, bugs.tab[,-1])
keeprows <- whichComparison(compNames.df, contrFactor="Time")
newBugs.tab2 <- newBugs.tab[keeprows,]

# -- compute min, max and average LSD by Bacterial strain and disease State
newBugs.lsd <- getLSDsummary(data = newBugs.tab2, lsdVar = "LSD",
                             by = c("Bacteria1", "State1"))

# -- create list needed to plot means and LSDs
newBugs.list <- makeLSDlist(meansData = bugs.m2df, y = "Mean", x = "Time",
                            LSD = newBugs.lsd, eqLevelFactors = c("Bacteria", "State"),
                            lsdVar = "LSD_avg", edgeWidth = 0.05)

# plot means with LSD bars, facetting by Bacteria and State
meansLSDplot(lsdList = newBugs.list, x = "Time", y = "Mean", facets = c("Bacteria","State"),
             xLabel = "Time (hours)", yLabel = "Predicted mean",
             tickMarkLabelSize = 11, xTickLabelAngle = 90) +
             geom_line(data = newBugs.list[[1]], size = 0.9)

# average LSD over bacterial strains
newBugs.list2 <- makeLSDlist(meansData = bugs.m2df, y = "Mean", x = "Time",
                             LSD = newBugs.lsd, eqLevelFactors = "Bacteria",
                             lsdVar = "LSD_avg", edgeWidth = 0.05)

# plot means facetting only by bacterial strain, using different line types for disease states
meansLSDplot(lsdList = newBugs.list2, x = "Time", y = "Mean", facets = c("Bacteria", "."),
             xLabel = "Time (hours)", yLabel = "Predicted mean", shape = "State",
             lineType = "State", tickMarkLabelSize = 11, xTickLabelAngle = 90,
             xStripTextSize = 10, legendKeyWidth = 1.2)

}
